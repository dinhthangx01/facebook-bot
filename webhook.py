from flask import Flask, request
import requests, os
from dotenv import load_dotenv
import google.generativeai as genai
import pandas as pd

# --- T·∫¢I BI·∫æN M√îI TR∆Ø·ªúNG (.env ho·∫∑c Render Environment) ---
load_dotenv()

app = Flask(__name__)

PAGE_ACCESS_TOKEN = os.getenv("PAGE_ACCESS_TOKEN")
VERIFY_TOKEN = os.getenv("VERIFY_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

# --- C·∫§U H√åNH GEMINI ---
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel("gemini-2.0-flash")

# --- (T√ôY CH·ªåN) T·∫†O B·∫¢NG TOKEN CHO NHI·ªÄU PAGE ---
# N·∫øu ch·ªâ c√≥ 1 page, c√≥ th·ªÉ ƒë·ªÉ tr·ªëng
PAGE_TOKENS = {
    # "467766493076266": os.getenv("PAGE_TOKEN_MOM"),
    # "230499322269144": os.getenv("PAGE_TOKEN_GOD")
}

# --- (T√ôY CH·ªåN) ƒê·ªåC D·ªÆ LI·ªÜU S·∫¢N PH·∫®M / QUOTES T·ª™ EXCEL ---
excel_path = "quotes_links.xlsx"
if os.path.exists(excel_path):
    try:
        df = pd.read_excel(excel_path)
    except Exception as e:
        print("‚ö†Ô∏è Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c file Excel:", e)
        df = pd.DataFrame(columns=["Quote", "Link"])
else:
    df = pd.DataFrame(columns=["Quote", "Link"])

def find_quote_link(user_message):
    """T√¨m quote ho·∫∑c link ph√π h·ª£p trong file Excel"""
    try:
        results = df[df["Quote"].str.contains(user_message, case=False, na=False)]
        if not results.empty:
            row = results.iloc[0]
            return f"{row['Quote']}\nüëâ Link s·∫£n ph·∫©m: {row['Link']}"
        return None
    except Exception as e:
        print("‚ö†Ô∏è L·ªói t√¨m trong Excel:", e)
        return None

# --- ROUTE KI·ªÇM TRA HO·∫†T ƒê·ªòNG ---
@app.route("/", methods=["GET"])
def home():
    return "‚úÖ Heaven Facebook Bot (Gemini 2.0 Flash) ƒëang ho·∫°t ƒë·ªông!"

# --- ROUTE KI·ªÇM TRA WEBHOOK (FACEBOOK Y√äU C·∫¶U) ---
@app.route("/webhook", methods=["GET"])
def verify():
    token = request.args.get("hub.verify_token")
    challenge = request.args.get("hub.challenge")
    if token == VERIFY_TOKEN:
        return challenge
    return "Token kh√¥ng h·ª£p l·ªá ‚ùå", 403

# --- ROUTE NH·∫¨N TIN NH·∫ÆN T·ª™ FACEBOOK ---
@app.route("/webhook", methods=["POST"])
def receive_message():
    data = request.get_json()

    if data.get("object") == "page":
        for entry in data.get("entry", []):  # ‚ö° duy·ªát t·∫•t c·∫£ entry
            page_id = entry.get("id")        # l·∫•y ID c·ªßa page g·ª≠i ƒë·∫øn
            for event in entry.get("messaging", []):  # ‚ö° duy·ªát t·∫•t c·∫£ event
                if "message" in event and "text" in event["message"]:
                    sender_id = event["sender"]["id"]
                    user_message = event["message"]["text"]

                    # ‚úÖ x·ª≠ l√Ω logic tr·∫£ l·ªùi (AI ho·∫∑c Excel)
                    excel_reply = find_quote_link(user_message)
                    if excel_reply:
                        reply_text = excel_reply
                    else:
                        reply_text = generate_reply(user_message)

                    # ‚úÖ g·ª≠i ph·∫£n h·ªìi l·∫°i ƒë√∫ng ng∆∞·ªùi, ƒë√∫ng page
                    send_message(sender_id, reply_text, page_id)
    return "OK", 200

# --- X·ª¨ L√ù TR·∫¢ L·ªúI B·∫∞NG GEMINI ---
def generate_reply(message_text):
    try:
        prompt = f"""
        B·∫°n l√† chuy√™n vi√™n t∆∞ v·∫•n b√°n h√†ng th√¢n thi·ªán c·ªßa Heaven Shop.
        H√£y tr·∫£ l·ªùi kh√°ch h√†ng t·ª± nhi√™n, c·∫£m x√∫c v√† ng·∫Øn g·ªçn.
        N·∫øu kh√°ch h·ªèi v·ªÅ s·∫£n ph·∫©m, h√£y g·ª£i √Ω nh·∫π nh√†ng, kh√¥ng √©p mua.

        Kh√°ch: {message_text}
        Bot:"""
        response = model.generate_content(prompt)
        return response.text.strip()
    except Exception as e:
        print("‚ö†Ô∏è Gemini error:", e)
        return "Xin l·ªói, hi·ªán t·∫°i t√¥i ƒëang g·∫∑p s·ª± c·ªë, vui l√≤ng th·ª≠ l·∫°i sau."

# --- G·ª¨I PH·∫¢N H·ªíI L·∫†I FACEBOOK ---
def send_message(recipient_id, text, page_id=None):
    try:
        token = PAGE_TOKENS.get(page_id, PAGE_ACCESS_TOKEN)  # n·∫øu ch·ªâ 1 page
        url = f"https://graph.facebook.com/v17.0/me/messages?access_token={token}"

        payload = {
            "recipient": {"id": recipient_id},
            "message": {"text": text}
        }
        headers = {"Content-Type": "application/json"}
        response = requests.post(url, json=payload, headers=headers)

        if response.status_code != 200:
            print(f"‚ö†Ô∏è L·ªói g·ª≠i tin nh·∫Øn: {response.text}")
    except Exception as e:
        print("‚ö†Ô∏è Send error:", e)

# --- CH·∫†Y ·ª®NG D·ª§NG FLASK ---
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=10000)
